{"version":3,"sources":["components/PDFAnnotater.js","components/Print.js","App.js","serviceWorker.js","index.js","../node_modules/pdfjs-dist/build sync","../node_modules/jsdom/lib/jsdom sync","../node_modules/parse5/lib sync"],"names":["pdfjs","GlobalWorkerOptions","workerSrc","version","PDFAnnotater","state","pageNumber","goToPrevPage","setState","goToNextPage","this","numPages","className","file","onLoadSuccess","onDocumentLoadSuccess","width","tool","Tools","Rectangle","lineColor","lineWidth","height","React","Component","Print","ref","el","componentRef","trigger","href","content","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id"],"mappings":"qXAIAA,QAAMC,oBAAoBC,UAA1B,kDAAiFF,QAAMG,QAAvF,kB,IAoCeC,E,2MAjCbC,MAAQ,CAAEC,WAAY,G,EAEtBC,aAAe,kBACb,EAAKC,UAAS,SAAAH,GAAK,MAAK,CAAEC,WAAYD,EAAMC,WAAa,O,EAC3DG,aAAe,kBACb,EAAKD,UAAS,SAAAH,GAAK,MAAK,CAAEC,WAAYD,EAAMC,WAAa,O,wEAEjD,IAAD,EAC0BI,KAAKL,MAA9BC,EADD,EACCA,WADD,EACaK,SAEpB,OACE,yBAAKC,UAAU,gBACb,yBAAKA,UAAU,yBACb,yBAAKA,UAAU,wBAEb,kBAAC,WAAD,CACEA,UAAU,2BACVC,KAAK,0BACLC,cAAeJ,KAAKK,uBAEpB,kBAAC,OAAD,CAAMT,WAAYA,EAAYU,MAAO,QAIzC,yBAAKJ,UAAU,+BACb,kBAAC,cAAD,CAAaK,KAAMC,QAAMC,UAAWC,UAAU,MAAMC,UAAW,EAAGC,OAAQ,c,GA1B3DC,IAAMC,WCelBC,E,iLAhBJ,IAAD,OACN,OACE,yBAAKb,UAAU,SACb,wBAAIA,UAAU,iBAAd,oBAEA,kBAAC,EAAD,CAAcc,IAAK,SAAAC,GAAE,OAAK,EAAKC,aAAeD,KAE9C,kBAAC,IAAD,CACEE,QAAS,kBAAM,4BAAQjB,UAAU,gBAAgBkB,KAAK,KAAvC,cACfC,QAAS,kBAAM,EAAKH,qB,GAVVL,IAAMC,W,QCSXQ,MARf,WACE,OACE,yBAAKpB,UAAU,OACb,kBAAC,EAAD,QCIcqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBEnInB,SAASC,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,K,mQCRzB,SAAST,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,K,kBCRzB,SAAST,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,M","file":"static/js/main.5bb93a82.chunk.js","sourcesContent":["import React from 'react';\r\nimport { SketchField, Tools } from 'react-sketch';\r\nimport { Document, Page, pdfjs } from 'react-pdf';\r\n\r\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\r\n\r\nclass PDFAnnotater extends React.Component {\r\n  state = { pageNumber: 1 };\r\n\r\n  goToPrevPage = () =>\r\n    this.setState(state => ({ pageNumber: state.pageNumber - 1 }));\r\n  goToNextPage = () =>\r\n    this.setState(state => ({ pageNumber: state.pageNumber + 1 }));\r\n\r\n  render() {\r\n    const { pageNumber, numPages } = this.state;\r\n\r\n    return (\r\n      <div className=\"PDFAnnotater\">       \r\n        <div className=\"PDFAnnotater__wrapper\">\r\n          <div className=\"PDFAnnotater__loaded\">\r\n            {/* Loads PDF */}\r\n            <Document\r\n              className=\"PDFAnnotater__loaded-PDF\"\r\n              file=\"./AaronNguyenResume.pdf\"\r\n              onLoadSuccess={this.onDocumentLoadSuccess}\r\n            >\r\n              <Page pageNumber={pageNumber} width={780} />\r\n            </Document>\r\n          </div>\r\n          {/* Loads Canvas over PDF */}\r\n          <div className=\"PDFAnnotater__loaded-canvas\">\r\n            <SketchField tool={Tools.Rectangle} lineColor='red' lineWidth={2} height={1009}/>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default PDFAnnotater;","import React from 'react';\r\nimport ReactToPrint from 'react-to-print';\r\nimport PDFAnnotater from './PDFAnnotater';\r\n\r\nclass Print extends React.Component {\r\n  render(){\r\n    return (\r\n      <div className=\"print\">\r\n        <h2 className=\"print__header\">Draw on the PDF!</h2>\r\n        {/* Imports PDF Annotater component to be target for print */}\r\n        <PDFAnnotater ref={el => (this.componentRef = el)} />\r\n        {/* Creates Print button and targets component to print */}\r\n        <ReactToPrint \r\n          trigger={() => <button className=\"print__button\" href=\"#\">Print PDF</button>}\r\n          content={() => this.componentRef}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n};\r\n\r\nexport default Print;","import React from 'react';\nimport Print from './components/Print';\n\nimport './sass/main.scss';\n\nfunction App() {\n  return (\n    <div className=\"app\">      \n      <Print/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 161;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 748;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 780;"],"sourceRoot":""}